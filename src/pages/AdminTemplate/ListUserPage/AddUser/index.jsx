import { useEffect } from "react";
import { Form, Input, Button, Select, notification, Card } from "antd";
import {
  UserOutlined,
  LockOutlined,
  MailOutlined,
  PhoneOutlined,
  EditOutlined,
  UserSwitchOutlined,
} from "@ant-design/icons";
import { useNavigate, useParams } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { fetchUserInfo, updateUser, createUser, resetUserInfo } from "./slice";

const { Option } = Select;

export default function AddUserPage() {
  const [form] = Form.useForm();
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { id } = useParams();
  const { userInfo, loading } = useSelector((state) => state.userReducer);

  useEffect(() => {
    if (id) {
      dispatch(fetchUserInfo(id));
    }
    return () => dispatch(resetUserInfo());
  }, [dispatch, id]);

  useEffect(() => {
    if (userInfo) {
      form.setFieldsValue(userInfo);
    } else {
      form.resetFields();
    }
  }, [userInfo, form]);

  const handleSubmit = (values) => {
    const userData = { ...values, maNhom: "GP08" };

    console.log("üöÄ ~ handleSubmit ~ userData:", userData);
    if (id) {
      dispatch(updateUser(userData))
        .unwrap()
        .then(() => {
          notification.success({
            message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
            placement: "bottomRight",
          });
          navigate("/admin/list-user");
        })
        .catch((error) => {
          notification.error({
            message: "C·∫≠p nh·∫≠t th·∫•t b·∫°i!",
            description: error || "C√≥ l·ªói x·∫£y ra!",
            placement: "bottomRight",
          });
        });
    } else {
      dispatch(createUser(userData))
        .unwrap()
        .then(() => {
          notification.success({
            message: "Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng!",
            placement: "bottomRight",
          });
          navigate("/admin/list-user");
        })
        .catch((error) => {
          notification.error({
            message: "Th√™m ng∆∞·ªùi d√πng th·∫•t b·∫°i!",
            description: error || "C√≥ l·ªói x·∫£y ra!",
            placement: "bottomRight",
          });
        });
    }
  };

  return (
    <div className="flex flex-col items-center justify-center p-5">
      <h2 className="text-left text-2xl font-bold  w-full pb-4">
        {id ? "C·∫≠p Nh·∫≠t Ng∆∞·ªùi D√πng" : "Th√™m Ng∆∞·ªùi D√πng"}
      </h2>
      <Card className="w-full max-w-lg shadow-xl rounded-lg bg-white ">
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          initialValues={{ maLoaiNguoiDung: "KhachHang" }}
        >
          <Form.Item
            label={<span className="text-lg">T√†i kho·∫£n</span>}
            name="taiKhoan"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√†i kho·∫£n!" }]}
          >
            <Input
              prefix={<UserOutlined />}
              placeholder="Nh·∫≠p t√†i kho·∫£n"
              className="text-lg"
              disabled={!!id}
            />
          </Form.Item>

          <Form.Item
            label={<span className="text-lg">M·∫≠t kh·∫©u</span>}
            name="matKhau"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!" }]}
          >
            <Input.Password
              prefix={<LockOutlined />}
              placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
              className="text-lg"
            />
          </Form.Item>

          <Form.Item
            label={<span className="text-lg">Email</span>}
            name="email"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p email!" },
              { type: "email", message: "Email kh√¥ng h·ª£p l·ªá!" },
            ]}
          >
            <Input
              prefix={<MailOutlined />}
              placeholder="Nh·∫≠p email"
              className="text-lg"
            />
          </Form.Item>

          <Form.Item
            label={<span className="text-lg">S·ªë ƒëi·ªán tho·∫°i</span>}
            name="soDT"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!" },
              { pattern: /^[0-9]+$/, message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!" },
            ]}
          >
            <Input
              prefix={<PhoneOutlined />}
              placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
              className="text-lg"
            />
          </Form.Item>

          <Form.Item
            label={<span className="text-lg">H·ªç t√™n</span>}
            name="hoTen"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p h·ªç t√™n!" }]}
          >
            <Input
              prefix={<EditOutlined />}
              placeholder="Nh·∫≠p h·ªç t√™n"
              className="text-lg"
            />
          </Form.Item>

          <Form.Item
            label={<span className="text-lg">Lo·∫°i ng∆∞·ªùi d√πng</span>}
            name="maLoaiNguoiDung"
          >
            <Select
              prefix={<UserSwitchOutlined />}
              className="text-lg"
              size="large"
            >
              <Option value="KhachHang">Kh√°ch H√†ng</Option>
              <Option value="QuanTri">Qu·∫£n Tr·ªã</Option>
            </Select>
          </Form.Item>

          <Form.Item>
            <Button
              type="primary"
              htmlType="submit"
              block
              className="text-lg py-5"
              loading={loading}
            >
              {id ? "C·∫≠p Nh·∫≠t Ng∆∞·ªùi D√πng" : "Th√™m Ng∆∞·ªùi D√πng"}
            </Button>
          </Form.Item>
        </Form>
      </Card>
    </div>
  );
}
